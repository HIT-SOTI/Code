@startuml

class Parser {
    -std::ifstream inputGrammar;             //语法输入
    -std::string lineString;                 //读出的一行语法
    -std::vector<GenerateExpression> exps;   //所有产生式
    -GenerateExpression *expStart;           //增广文法开始符
    -std::vector<Symbol> rightStart;         //增广文法首产生式右部第一个式子（实际上只有一个式子）
    -Symbol *symbolStart;                    //原文法首符号
    -std::vector<Items> allItems;            //项集族
    -std::queue<Items> QItems;               //所有项集队列
    -std::unordered_map<Symbol, std::vector<Symbol>, customHashFunc, customCmpFunc> first;//FIRST
    -std::unordered_map<Symbol, std::vector<Symbol>, customHashFunc, customCmpFunc> follow;//FOLLOW
    -Symbol *endSym = new Symbol("$", 0);//follow集初始化
    +Parser();
    +~Parser();
    +bool openInputGrammar(const std::string &fileName);
    +void closeInputGrammar();
    +void pretreatment();/* 1.文法预处理（读文件 增广文法） */
    +void printGrammar();//输出检查
    +void generateGOTO();/* 2.求闭包 生成GOTO图（需要用到前面的exps即所有产生式）*/
    +void generateFIRSTAndFOLLOW();/* 3.求FIRST和FOLLOW */
}

@enduml